// Aprenda ReactJS, NextJS, Styled-Components, Testes com Jest,
// Storybook, Strapi, HTML e CSS com TypeScript e JavaScript
// by Luiz Otávio Miranda.

// Seção 8: Projeto 1: Landing pages com React (Front-end)

// Aula:
// 140. Componente Menu - Parte 2

// Portal que oferece MUITOS ícones
// construídos com a lib styled-components
// https://styled-icons.dev/

// Ao usar algum component dessa lib, é importante
// definir alguma regras css, para que o ícone aparece
// na tela de fato:
// Exemplo: 
// Ícone: '@styled-icons/material-outlined/Menu';
`
export const Button = styled.button`
  ${({ theme }) => css`
    z-index: 6;
    position: fixed;
    top: 2rem;
    right: 2rem;
    width: 4rem;
    height: 4rem;
  `}
`;

`
// Quando esse "icon-component" é usado dentro de um
// 'styled-component', para se referir a ele, pode-se
// usar o seletor css de 'filho direto':
// Exemplo:
`
> svg {
  <css-rules>;
}
`
// Ou seja, esses componentes são vetores (.svg) internamente.

// CSS tip:
// 'display: none' Vs. 'visibility: hidden; opacity: 0;'
// Ambas as regras css provocam um efeito parecido, pois
// ambas escondem o elemento da tela.
// Entretanto, caso o dev queira aplicar algum efeito
// que mude o estado da visibilidade do elemento, as
// propriedades css
`
visibility: hidden;
opacity: 0;
`
// permitem que o dev aplique com efeito desejado com a
// propriedade 'transition', por exemplo.
// Por outro lado, a propriedade 'display: none' não
// permite a aplicação de nenhum efeito.

// #!important:
// Pesquisar sobre a propriedade css 'pointer-events'.
// Ela permite retirar quaisquer eventos do tipo 'Pointer'
// de um elemento. Isso pode ser útil dependendo da lógica do
// front-end que o programador quer aplicar.
// Exemplo: (usando styled-components)
`
pointer-events: ${visible ? 'none' : 'all'};
`
// Ou seja, com base na condicional, são retirados
// os eventos sintéticos do elemento ou são adicionados
// todos a ele.
